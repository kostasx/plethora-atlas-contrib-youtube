// Generated by CoffeeScript 1.12.4
var FgCyan, FgGreen, FgRed, FgYellow, ProgressBar, Reset, YT, colors, fs, protocol, request, userAgent, ytPrefix, ytdl;

fs = require('fs');

ytdl = require('ytdl-core');

ProgressBar = require('progress');

request = require('request');

colors = require('colors');

protocol = "https://";

ytPrefix = protocol + "www.youtube.com/watch?v=";

Reset = "\x1b[0m";

FgRed = "\x1b[31m";

FgGreen = "\x1b[32m";

FgYellow = "\x1b[33m";

FgCyan = "\x1b[36m";

userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36";

YT = {
  downloadVideo: function(options) {
    var output, stream, video;
    video = options.video;
    if (video.indexOf("http") !== 0) {
      if (video.indexOf("www") !== 0) {
        video = ytPrefix + video;
      } else {
        video = protocol + video;
      }
    }
    stream = ytdl(video, {});
    output = 'video.flv';
    if (options.output) {
      output = options.output;
    }
    stream.pipe(fs.createWriteStream(output));
    return stream.on('response', function(res) {
      var bar, downloaded, totalSize;
      totalSize = res.headers['content-length'];
      downloaded = 0;
      bar = new ProgressBar('Downloading [:bar] :percent :etas', {
        complete: FgRed + "▇" + Reset,
        incomplete: ' ',
        width: 20,
        total: parseInt(totalSize, 10)
      });
      res.on('data', function(chunk) {
        var downloadedPercentage;
        downloaded += chunk.length;
        downloadedPercentage = ((downloaded / totalSize) * 100).toFixed();
        bar.tick(chunk.length);
        if (downloadedPercentage > 25) {
          bar.chars.complete = FgYellow + "▇" + Reset;
        }
        if (downloadedPercentage > 50) {
          bar.chars.complete = FgCyan + "▇" + Reset;
        }
        if (downloadedPercentage > 75) {
          return bar.chars.complete = FgGreen + "▇" + Reset;
        }
      });
      return res.on('end', function() {
        return console.log("Finished downloading video!".green);
      });
    });
  },
  getCaptionsList: function(options) {
    var format, timedTxtUrl, vid;
    vid = options.id;
    timedTxtUrl = "https://video.google.com/timedtext?hl=en&type=list&v=" + vid;
    format = options.fmt || "vtt";
    return new Promise(function(resolve, reject) {
      return request({
        method: 'GET',
        headers: {
          'User-Agent': userAgent
        },
        url: timedTxtUrl
      }, function(error, res, body) {
        var parseString;
        if (!error && res.statusCode === 200) {
          parseString = require('xml2js').parseString;
          return parseString(body, function(err, res) {
            var subs;
            subs = res.transcript_list.track[0].$;
            options.captionsList = subs;
            return resolve(options);
          });
        } else {
          if (error) {
            resolve(("Error " + error).red);
          }
          console.log("Something went wrong!".red);
          return resolve(res);
        }
      });
    });
  },
  getCaption: function(options) {
    var format, vid;
    vid = options.id;
    format = options.fmt || "vtt";
    return new Promise(function(resolve, reject) {
      return YT.getCaptionsList(options).then(function(res) {
        var captionsList, timedTxtApiUrl;
        captionsList = res.captionsList;
        timedTxtApiUrl = "https://www.youtube.com/api/timedtext?";
        timedTxtApiUrl += "lang=" + captionsList.lang_code + "&v=" + vid + "&fmt=" + format + "&name=" + (encodeURI(captionsList.name));
        return request({
          method: 'GET',
          headers: {
            'User-Agent': userAgent
          },
          url: timedTxtApiUrl
        }, function(error, res, body) {
          if (!error && res.statusCode === 200) {
            options.captions = body;
            return resolve(options);
          } else {
            console.log("Something went wrong!".red);
            if (error) {
              resolve(("Error " + error).red);
            }
            return resolve(res);
          }
        });
      })["catch"](console.log);
    });
  }
};

module.exports = YT;
