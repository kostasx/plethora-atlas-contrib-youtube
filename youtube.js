// Generated by CoffeeScript 1.10.0
var FgCyan, FgGreen, FgRed, FgYellow, ProgressBar, Reset, YT, fs, protocol, ytPrefix, ytdl;

fs = require('fs');

ytdl = require('ytdl-core');

ProgressBar = require('progress');

protocol = "https://";

ytPrefix = protocol + "www.youtube.com/watch?v=";

Reset = "\x1b[0m";

FgRed = "\x1b[31m";

FgGreen = "\x1b[32m";

FgYellow = "\x1b[33m";

FgCyan = "\x1b[36m";

YT = {
  downloadVideo: function(options) {
    var output, stream, video;
    video = options.video;
    if (video.indexOf("http") !== 0) {
      if (video.indexOf("www") !== 0) {
        video = ytPrefix + video;
      } else {
        video = protocol + video;
      }
    }
    stream = ytdl(video, {});
    output = 'video.flv';
    if (options.output) {
      output = options.output;
    }
    stream.pipe(fs.createWriteStream(output));
    return stream.on('response', function(res) {
      var bar, downloaded, totalSize;
      totalSize = res.headers['content-length'];
      downloaded = 0;
      bar = new ProgressBar('Downloading [:bar] :percent :etas', {
        complete: FgRed + "▇" + Reset,
        incomplete: ' ',
        width: 20,
        total: parseInt(totalSize, 10)
      });
      res.on('data', function(chunk) {
        var downloadedPercentage;
        downloaded += chunk.length;
        downloadedPercentage = ((downloaded / totalSize) * 100).toFixed();
        bar.tick(chunk.length);
        if (downloadedPercentage > 25) {
          bar.chars.complete = FgYellow + "▇" + Reset;
        }
        if (downloadedPercentage > 50) {
          bar.chars.complete = FgCyan + "▇" + Reset;
        }
        if (downloadedPercentage > 75) {
          return bar.chars.complete = FgGreen + "▇" + Reset;
        }
      });
      return res.on('end', function() {
        return console.log("Finished downloading video!".green);
      });
    });
  },
  debug: function(options) {}
};

module.exports = YT;
